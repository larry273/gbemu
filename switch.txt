switch (code) {
	case 0x00:  nop(); cycles=4; currentOpCode= "NOP"; break;
	case 0x01:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load(reg.B, reg.C, val2, val1);
		currentOpCode= "LD BC nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; 
		break;
	}
	case 0x02:  load(pairReg(reg.B, reg.C), reg.A); cycles=8; currentOpCode= "LD (BC) A"; break;
	case 0x03:  inc(reg.B, reg.C); cycles=8; currentOpCode= "INC BC"; break;
	case 0x04:  inc(reg.B); cycles=4; currentOpCode= "INC B"; break;
	case 0x05:  dec(reg.B); cycles=4; currentOpCode= "DEC B"; break;
	case 0x06:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD B n : " + formatHex(mem.read(pc+1)); 
		load(reg.B, mem.read(pc+1));
		break;
	}
	case 0x07:  rlca(); cycles=4; currentOpCode= "RLCA"; break;
	case 0x08:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load( joinByte(val2, val1), reg.SP); currentOpCode= "LD (nn) SP : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=8; 
		break;
	}
	case 0x09:  add(reg.H, reg.L, reg.B, reg.C); cycles=8; currentOpCode= "ADD HL BC"; break;
	case 0x0A:  load(reg.A, pairReg(reg.B, reg.C)); cycles=8; currentOpCode= "LD A (BC)"; break;
	case 0x0B:  dec(reg.B, reg.C); cycles=8; currentOpCode= "DEC BC"; break;
	case 0x0C:  inc(reg.C); cycles=4; currentOpCode= "INC C"; break;
	case 0x0D:  dec(reg.C); cycles=4; currentOpCode= "DEC C"; break;
	case 0x0E:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD C n : " + formatHex(mem.read(pc+1)); 
		load(reg.C, mem.read(pc+1));
		break;
	}
	case 0x0F:  rrca(); cycles=4; currentOpCode= "RRCA"; break;
	case 0x10:  break;
	case 0x11:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load(reg.D, reg.E, val2, val1);
		currentOpCode= "LD DE nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; 
		break;
	}
	case 0x12:  load(pairReg(reg.D, reg.E), reg.A); cycles=8; currentOpCode= "LD (DE) A"; break;
	case 0x13:  inc(reg.D, reg.E); cycles=8; currentOpCode= "INC DE"; break;
	case 0x14:  inc(reg.D); cycles=4; currentOpCode= "INC D"; break;
	case 0x15:  dec(reg.D); cycles=4; currentOpCode= "DEC D"; break;
	case 0x16:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD D n : " + formatHex(mem.read(pc+1)); 
		load(reg.D, mem.read(pc+1));
		break;
	}
	case 0x17:  rla(); cycles=4; currentOpCode= "RLA"; break;
	case 0x18:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2; isJump = true; cycles=8;
		currentOpCode= "JR e : " + formatHex(mem.read(pc+1)); 
		jr(val1);		break;
	}
	case 0x19:  add(reg.H, reg.L, reg.D, reg.E); cycles=8; currentOpCode= "ADD HL DE"; break;
	case 0x1A:  load(reg.A, pairReg(reg.D, reg.E)); cycles=8; currentOpCode= "LD A (DE)"; break;
	case 0x1B:  dec(reg.D, reg.E); cycles=8; currentOpCode= "DEC DE"; break;
	case 0x1C:  inc(reg.E); cycles=4; currentOpCode= "INC E"; break;
	case 0x1D:  dec(reg.E); cycles=4; currentOpCode= "DEC E"; break;
	case 0x1E:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD E n : " + formatHex(mem.read(pc+1)); 
		load(reg.E, mem.read(pc+1));
		break;
	}
	case 0x1F:  rra(); cycles=4; currentOpCode= "RRA"; break;
	case 0x20:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2;
		bool jump = jr(val1, ~FLAGZERO); if (jump) {isJump = true; cycles=12;} cycles=8;
		currentOpCode= "JR NZ e : " + formatHex(mem.read(pc+1)); 
break;
	}
	case 0x21:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load(reg.H, reg.L, val2, val1);
		currentOpCode= "LD HL nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; 
		break;
	}
	case 0x22:  load(pairReg(reg.H, reg.L), reg.A); inc(reg.A, true); cycles=8; currentOpCode= "LD (HL+) A"; break;
	case 0x23:  inc(reg.H, reg.L); cycles=8; currentOpCode= "INC HL"; break;
	case 0x24:  inc(reg.H); cycles=4; currentOpCode= "INC H"; break;
	case 0x25:  dec(reg.H); cycles=4; currentOpCode= "DEC H"; break;
	case 0x26:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD H n : " + formatHex(mem.read(pc+1)); 
		load(reg.H, mem.read(pc+1));
		break;
	}
	case 0x27:  daa(); cycles=4; currentOpCode= "DAA"; break;
	case 0x28:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2;
		bool jump = jr(val1, FLAGZERO); if (jump) {isJump = true; cycles=12;} cycles=8;
		currentOpCode= "JR Z e : " + formatHex(mem.read(pc+1)); 
break;
	}
	case 0x29:  add(reg.H, reg.L, reg.H, reg.L); cycles=8; currentOpCode= "ADD HL HL"; break;
	case 0x2A:  load(reg.A, pairReg(reg.H, reg.L)); inc(reg.A, true); cycles=8; currentOpCode= "LD A (HL+)"; break;
	case 0x2B:  dec(reg.H, reg.L); cycles=8; currentOpCode= "DEC HL"; break;
	case 0x2C:  inc(reg.L); cycles=4; currentOpCode= "INC L"; break;
	case 0x2D:  dec(reg.L); cycles=4; currentOpCode= "DEC L"; break;
	case 0x2E:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD L n : " + formatHex(mem.read(pc+1)); 
		load(reg.L, mem.read(pc+1));
		break;
	}
	case 0x2F:  cpl(); cycles=4; currentOpCode= "CPL"; break;
	case 0x30:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2;
		bool jump = jr(val1, ~FLAGCARRY); if (jump) {isJump = true; cycles=12;} cycles=8;
		currentOpCode= "JR NC e : " + formatHex(mem.read(pc+1)); 
break;
	}
	case 0x31:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		currentOpCode= "LD SP nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12;
		break;
	}
	case 0x32:  load(pairReg(reg.H, reg.L), reg.A); dec(reg.A, true); cycles=8; currentOpCode= "LD (HL-) A"; break;
	case 0x33:  incSP(); cycles=8; currentOpCode= "INC SP"; break;
	case 0x34:  inc(reg.A, true); cycles=12; currentOpCode= "INC (HL)"; break;
	case 0x35:  dec(reg.A, true); cycles=12; currentOpCode= "DEC (HL)"; break;
	case 0x36:{
		uint16_t val1 = mem.read(pc+1);
		opbytes = 2; cycles=12;
		currentOpCode= "LD (HL) n : " + formatHex(mem.read(pc+1)); 
		load( pairReg(reg.H, reg.L ), val1);		break;
	}
	case 0x37:  scf(); cycles=4; currentOpCode= "SCF"; break;
	case 0x38:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2;
		bool jump = jr(val1, FLAGCARRY); if (jump) {isJump = true; cycles=12;} cycles=8;
		currentOpCode= "JR C e : " + formatHex(mem.read(pc+1)); 
break;
	}
	case 0x39:  addSP2Reg(reg.H, reg.L); cycles=8; currentOpCode= "ADD HL SP"; break;
	case 0x3A:  load(reg.A, pairReg(reg.H, reg.L) ); dec(reg.A, true); cycles=8; currentOpCode= "LD A (HL-)"; break;
	case 0x3B:  decSP(); cycles=8; currentOpCode= "DEC SP"; break;
	case 0x3C:  inc(reg.A); cycles=4; currentOpCode= "INC A"; break;
	case 0x3D:  dec(reg.A); cycles=4; currentOpCode= "DEC A"; break;
	case 0x3E:{
		opbytes = 2; cycles=8;
		currentOpCode= "LD A n : " + formatHex(mem.read(pc+1)); 
		load(reg.A, mem.read(pc+1));
		break;
	}
	case 0x3F:  ccf(); cycles=4; currentOpCode= "CCF"; break;
	case 0x40:  load(reg.B, reg.B); cycles=4; currentOpCode= "LD B B"; break;
	case 0x41:  load(reg.B, reg.C); cycles=4; currentOpCode= "LD B C"; break;
	case 0x42:  load(reg.B, reg.D); cycles=4; currentOpCode= "LD B D"; break;
	case 0x43:  load(reg.B, reg.E); cycles=4; currentOpCode= "LD B E"; break;
	case 0x44:  load(reg.B, reg.H); cycles=4; currentOpCode= "LD B H"; break;
	case 0x45:  load(reg.B, reg.L); cycles=4; currentOpCode= "LD B L"; break;
	case 0x46:  load(reg.B, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD B (HL)"; break;
	case 0x47:  load(reg.B, reg.A); cycles=4; currentOpCode= "LD B A"; break;
	case 0x48:  load(reg.C, reg.B); cycles=4; currentOpCode= "LD C B"; break;
	case 0x49:  load(reg.C, reg.C); cycles=4; currentOpCode= "LD C C"; break;
	case 0x4A:  load(reg.C, reg.D); cycles=4; currentOpCode= "LD C D"; break;
	case 0x4B:  load(reg.C, reg.E); cycles=4; currentOpCode= "LD C E"; break;
	case 0x4C:  load(reg.C, reg.H); cycles=4; currentOpCode= "LD C H"; break;
	case 0x4D:  load(reg.C, reg.L); cycles=4; currentOpCode= "LD C L"; break;
	case 0x4E:  load(reg.C, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD C (HL)"; break;
	case 0x4F:  load(reg.C, reg.A); cycles=4; currentOpCode= "LD C A"; break;
	case 0x50:  load(reg.D, reg.B); cycles=4; currentOpCode= "LD D B"; break;
	case 0x51:  load(reg.D, reg.C); cycles=4; currentOpCode= "LD D C"; break;
	case 0x52:  load(reg.D, reg.D); cycles=4; currentOpCode= "LD D D"; break;
	case 0x53:  load(reg.D, reg.E); cycles=4; currentOpCode= "LD D E"; break;
	case 0x54:  load(reg.D, reg.H); cycles=4; currentOpCode= "LD D H"; break;
	case 0x55:  load(reg.D, reg.L); cycles=4; currentOpCode= "LD D L"; break;
	case 0x56:  load(reg.D, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD D (HL)"; break;
	case 0x57:  load(reg.D, reg.A); cycles=4; currentOpCode= "LD D A"; break;
	case 0x58:  load(reg.E, reg.B); cycles=4; currentOpCode= "LD E B"; break;
	case 0x59:  load(reg.E, reg.C); cycles=4; currentOpCode= "LD E C"; break;
	case 0x5A:  load(reg.E, reg.D); cycles=4; currentOpCode= "LD E D"; break;
	case 0x5B:  load(reg.E, reg.E); cycles=4; currentOpCode= "LD E E"; break;
	case 0x5C:  load(reg.E, reg.H); cycles=4; currentOpCode= "LD E H"; break;
	case 0x5D:  load(reg.E, reg.L); cycles=4; currentOpCode= "LD E L"; break;
	case 0x5E:  load(reg.E, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD E (HL)"; break;
	case 0x5F:  load(reg.E, reg.A); cycles=4; currentOpCode= "LD E A"; break;
	case 0x60:  load(reg.H, reg.B); cycles=4; currentOpCode= "LD H B"; break;
	case 0x61:  load(reg.H, reg.C); cycles=4; currentOpCode= "LD H C"; break;
	case 0x62:  load(reg.H, reg.D); cycles=4; currentOpCode= "LD H D"; break;
	case 0x63:  load(reg.H, reg.E); cycles=4; currentOpCode= "LD H E"; break;
	case 0x64:  load(reg.H, reg.H); cycles=4; currentOpCode= "LD H H"; break;
	case 0x65:  load(reg.H, reg.L); cycles=4; currentOpCode= "LD H L"; break;
	case 0x66:  load(reg.H, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD H (HL)"; break;
	case 0x67:  load(reg.H, reg.A); cycles=4; currentOpCode= "LD H A"; break;
	case 0x68:  load(reg.L, reg.B); cycles=4; currentOpCode= "LD L B"; break;
	case 0x69:  load(reg.L, reg.C); cycles=4; currentOpCode= "LD L C"; break;
	case 0x6A:  load(reg.L, reg.D); cycles=4; currentOpCode= "LD L D"; break;
	case 0x6B:  load(reg.L, reg.E); cycles=4; currentOpCode= "LD L E"; break;
	case 0x6C:  load(reg.L, reg.H); cycles=4; currentOpCode= "LD L H"; break;
	case 0x6D:  load(reg.L, reg.L); cycles=4; currentOpCode= "LD L L"; break;
	case 0x6E:  load(reg.L, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD L (HL)"; break;
	case 0x6F:  load(reg.L, reg.A); cycles=4; currentOpCode= "LD L A"; break;
	case 0x70:  load(pairReg(reg.H, reg.L), reg.B); cycles=8; currentOpCode= "LD (HL) B"; break;
	case 0x71:  load(pairReg(reg.H, reg.L), reg.C); cycles=8; currentOpCode= "LD (HL) C"; break;
	case 0x72:  load(pairReg(reg.H, reg.L), reg.D); cycles=8; currentOpCode= "LD (HL) D"; break;
	case 0x73:  load(pairReg(reg.H, reg.L), reg.E); cycles=8; currentOpCode= "LD (HL) E"; break;
	case 0x74:  load(pairReg(reg.H, reg.L), reg.H); cycles=8; currentOpCode= "LD (HL) H"; break;
	case 0x75:  load(pairReg(reg.H, reg.L), reg.L); cycles=8; currentOpCode= "LD (HL) L"; break;
	case 0x76:  halt(); currentOpCode= "HALT"; break;
	case 0x77:  load(pairReg(reg.H, reg.L), reg.A); cycles=8; currentOpCode= "LD (HL) A"; break;
	case 0x78:  load(reg.A, reg.B); cycles=4; currentOpCode= "LD A B"; break;
	case 0x79:  load(reg.A, reg.C); cycles=4; currentOpCode= "LD A C"; break;
	case 0x7A:  load(reg.A, reg.D); cycles=4; currentOpCode= "LD A D"; break;
	case 0x7B:  load(reg.A, reg.E); cycles=4; currentOpCode= "LD A E"; break;
	case 0x7C:  load(reg.A, reg.H); cycles=4; currentOpCode= "LD A H"; break;
	case 0x7D:  load(reg.A, reg.L); cycles=4; currentOpCode= "LD A L"; break;
	case 0x7E:  load(reg.A, pairReg(reg.H, reg.L)); cycles=8; currentOpCode= "LD A (HL)"; break;
	case 0x7F:  load(reg.A, reg.A); cycles=4; currentOpCode= "LD A A"; break;
	case 0x80:  add(reg.A, reg.B); cycles=4; currentOpCode= "ADD B"; break;
	case 0x81:  add(reg.A, reg.C); cycles=4; currentOpCode= "ADD C"; break;
	case 0x82:  add(reg.A, reg.D); cycles=4; currentOpCode= "ADD D"; break;
	case 0x83:  add(reg.A, reg.E); cycles=4; currentOpCode= "ADD E"; break;
	case 0x84:  add(reg.A, reg.H); cycles=4; currentOpCode= "ADD H"; break;
	case 0x85:  add(reg.A, reg.L); cycles=4; currentOpCode= "ADD L"; break;
	case 0x86:  add(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "ADD (HL)"; break;
	case 0x87:  add(reg.A, reg.A); cycles=4; currentOpCode= "ADD A"; break;
	case 0x88:  adc(reg.A, reg.B); cycles=4; currentOpCode= "ADC B"; break;
	case 0x89:  adc(reg.A, reg.C); cycles=4; currentOpCode= "ADC C"; break;
	case 0x8A:  adc(reg.A, reg.D); cycles=4; currentOpCode= "ADC D"; break;
	case 0x8B:  adc(reg.A, reg.E); cycles=4; currentOpCode= "ADC E"; break;
	case 0x8C:  adc(reg.A, reg.H); cycles=4; currentOpCode= "ADC H"; break;
	case 0x8D:  adc(reg.A, reg.L); cycles=4; currentOpCode= "ADC L"; break;
	case 0x8E:  adc(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "ADC (HL)"; break;
	case 0x8F:  adc(reg.A, reg.A); cycles=4; currentOpCode= "ADC A"; break;
	case 0x90:  sub(reg.A, reg.B); cycles=4; currentOpCode= "SUB B"; break;
	case 0x91:  sub(reg.A, reg.C); cycles=4; currentOpCode= "SUB C"; break;
	case 0x92:  sub(reg.A, reg.D); cycles=4; currentOpCode= "SUB D"; break;
	case 0x93:  sub(reg.A, reg.E); cycles=4; currentOpCode= "SUB E"; break;
	case 0x94:  sub(reg.A, reg.H); cycles=4; currentOpCode= "SUB H"; break;
	case 0x95:  sub(reg.A, reg.L); cycles=4; currentOpCode= "SUB L"; break;
	case 0x96:  sub(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "SUB (HL)"; break;
	case 0x97:  sub(reg.A, reg.A); cycles=4; currentOpCode= "SUB A"; break;
	case 0x98:  sbc(reg.A, reg.B); cycles=4; currentOpCode= "SBC B"; break;
	case 0x99:  sbc(reg.A, reg.C); cycles=4; currentOpCode= "SBC C"; break;
	case 0x9A:  sbc(reg.A, reg.D); cycles=4; currentOpCode= "SBC D"; break;
	case 0x9B:  sbc(reg.A, reg.E); cycles=4; currentOpCode= "SBC E"; break;
	case 0x9C:  sbc(reg.A, reg.H); cycles=4; currentOpCode= "SBC H"; break;
	case 0x9D:  sbc(reg.A, reg.L); cycles=4; currentOpCode= "SBC L"; break;
	case 0x9E:  sbc(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "SBC (HL)"; break;
	case 0x9F:  sbc(reg.A, reg.A); cycles=4; currentOpCode= "SBC A"; break;
	case 0xA0:  logAnd(reg.A, reg.B); cycles=4; currentOpCode= "AND B"; break;
	case 0xA1:  logAnd(reg.A, reg.C); cycles=4; currentOpCode= "AND C"; break;
	case 0xA2:  logAnd(reg.A, reg.D); cycles=4; currentOpCode= "AND D"; break;
	case 0xA3:  logAnd(reg.A, reg.E); cycles=4; currentOpCode= "AND E"; break;
	case 0xA4:  logAnd(reg.A, reg.H); cycles=4; currentOpCode= "AND H"; break;
	case 0xA5:  logAnd(reg.A, reg.L); cycles=4; currentOpCode= "AND L"; break;
	case 0xA6:  logAnd(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "AND (HL)"; break;
	case 0xA7:  logAnd(reg.A, reg.A); cycles=4; currentOpCode= "AND A"; break;
	case 0xA8:  logXor(reg.A, reg.B); cycles=4; currentOpCode= "XOR B"; break;
	case 0xA9:  logXor(reg.A, reg.C); cycles=4; currentOpCode= "XOR C"; break;
	case 0xAA:  logXor(reg.A, reg.D); cycles=4; currentOpCode= "XOR D"; break;
	case 0xAB:  logXor(reg.A, reg.E); cycles=4; currentOpCode= "XOR E"; break;
	case 0xAC:  logXor(reg.A, reg.H); cycles=4; currentOpCode= "XOR H"; break;
	case 0xAD:  logXor(reg.A, reg.L); cycles=4; currentOpCode= "XOR L"; break;
	case 0xAE:  logXor(reg.A, pairRegData(reg.H, reg.L)); cycles=8;  currentOpCode= "XOR (HL)"; break;
	case 0xAF:  logXor(reg.A, reg.A); cycles=4; currentOpCode= "XOR A"; break;
	case 0xB0:  logOr(reg.A, reg.B); cycles=4; currentOpCode= "OR B"; break;
	case 0xB1:  logOr(reg.A, reg.C); cycles=4; currentOpCode= "OR C"; break;
	case 0xB2:  logOr(reg.A, reg.D); cycles=4; currentOpCode= "OR D"; break;
	case 0xB3:  logOr(reg.A, reg.E); cycles=4; currentOpCode= "OR E"; break;
	case 0xB4:  logOr(reg.A, reg.H); cycles=4; currentOpCode= "OR H"; break;
	case 0xB5:  logOr(reg.A, reg.L); cycles=4; currentOpCode= "OR L"; break;
	case 0xB6:  logOr(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "OR (HL)"; break;
	case 0xB7:  logOr(reg.A, reg.A); cycles=4; currentOpCode= "OR A"; break;
	case 0xB8:  cp(reg.A, reg.B); cycles=4; currentOpCode= "CP B"; break;
	case 0xB9:  cp(reg.A, reg.C); cycles=4; currentOpCode= "CP C"; break;
	case 0xBA:  cp(reg.A, reg.D); cycles=4; currentOpCode= "CP D"; break;
	case 0xBB:  cp(reg.A, reg.E); cycles=4; currentOpCode= "CP E"; break;
	case 0xBC:  cp(reg.A, reg.H); cycles=4; currentOpCode= "CP H"; break;
	case 0xBD:  cp(reg.A, reg.L); cycles=4; currentOpCode= "CP L"; break;
	case 0xBE:  cp(reg.A, pairRegData(reg.H, reg.L)); cycles=8; currentOpCode= "CP (HL)"; break;
	case 0xBF:  cp(reg.A, reg.A); cycles=4; currentOpCode= "CP A"; break;
	case 0xC0:{
		bool jump = ret( ~FLAGZERO); currentOpCode= "RET NZ";
		debugOpCode << " RET NZ \n"; if (jump) {isJump = true; cycles=20;} cycles=8; break;
	}
	case 0xC1:  pop(reg.B, reg.C); cycles=12; currentOpCode= "POP BC"; break;
	case 0xC2:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2); 
		bool jump = jp( joinByte(val2,val1), ~FLAGZERO);
		currentOpCode= "JP NZ nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; if (jump) {isJump = true; cycles=16;} 
		break;
	}
	case 0xC3:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2); 
		jp( joinByte(val2,val1) );
		currentOpCode= "JP nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=16; isJump = true ;
		break;
	}
	case 0xC4:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		bool jump = call(val2, val1, ~FLAGZERO);
		currentOpCode= "CALL NZ nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; if (jump) {isJump = true; cycles=24;} cycles=12;
		break;
	}
	case 0xC5:  push(reg.B, reg.C); cycles=16; currentOpCode= "PUSH BC"; break;
	case 0xC6:{
		opbytes = 2; cycles=8;
		currentOpCode= "ADD n : " + formatHex(mem.read(pc+1)); 
		add(reg.A, mem.read(pc+1));break;
	}
	case 0xC7:  rst(0x00); cycles=16; currentOpCode= "RST 0x00"; break;
	case 0xC8:{
		bool jump = ret( FLAGZERO); currentOpCode= "RET Z";
		debugOpCode << " RET Z \n"; if (jump) {isJump = true; cycles=20;} cycles=8; break;
	}
	case 0xC9:  ret(); isJump = true; cycles=16; currentOpCode= "RET"; break;
	case 0xCA:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2); 
		bool jump = jp( joinByte(val2,val1), FLAGZERO);
		currentOpCode= "JP Z nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; if (jump) {isJump = true; cycles=16;} 
		break;
	}
	case 0xCB:  decodePreByte(mem.read(pc+1)); opbytes = 2; break;
	case 0xCC:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		bool jump = call(val2, val1, FLAGZERO);
		currentOpCode= "CALL Z nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; if (jump) {isJump = true; cycles=24;} cycles=12;
		break;
	}
	case 0xCD:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		call(val2, val1);
		currentOpCode= "CALL nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; isJump = true; cycles=24; 
		break;
	}
	case 0xCE:{
		opbytes = 2; cycles=8;
		currentOpCode= "ADC n : " + formatHex(mem.read(pc+1)); 
		adc(reg.A, mem.read(pc+1));break;
	}
	case 0xCF:  rst(0x08); cycles=16; currentOpCode= "RST 0x08"; break;
	case 0xD0:{
		bool jump = ret( ~FLAGCARRY); currentOpCode= "RET NC";
		debugOpCode << " RET NC \n"; if (jump) {isJump = true; cycles=20;} cycles=8; break;
	}
	case 0xD1:  pop(reg.D, reg.E); cycles=12; currentOpCode= "POP DE"; break;
	case 0xD2:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2); 
		bool jump = jp( joinByte(val2,val1), ~FLAGCARRY);
		currentOpCode= "JP NC nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; if (jump) {isJump = true; cycles=16;} 
		break;
	}
	case 0xD4:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		bool jump = call(val2, val1, ~FLAGCARRY);
		currentOpCode= "CALL NC nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; if (jump) {isJump = true; cycles=24;} cycles=12;
		break;
	}
	case 0xD5:  push(reg.D, reg.E); cycles=16; currentOpCode= "PUSH DE"; break;
	case 0xD6:{
		opbytes = 2; cycles=8;
		currentOpCode= "SUB n : " + formatHex(mem.read(pc+1)); 
		sub(reg.A, mem.read(pc+1));break;
	}
	case 0xD7:  rst(0x10); cycles=16; currentOpCode= "RST 0x10"; break;
	case 0xD8:{
		bool jump = ret( FLAGCARRY); currentOpCode= "RET C";
		debugOpCode << " RET C \n"; if (jump) {isJump = true; cycles=20;} cycles=8; break;
	}
	case 0xD9:  reti(); cycles=16; currentOpCode= "RETI"; break;
	case 0xDA:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2); 
		bool jump = jp( joinByte(val2,val1), FLAGCARRY);
		currentOpCode= "JP C nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=12; if (jump) {isJump = true; cycles=16;} 
		break;
	}
	case 0xDC:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		bool jump = call(val2, val1, FLAGCARRY);
		currentOpCode= "CALL C nn : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; if (jump) {isJump = true; cycles=24;} cycles=12;
		break;
	}
	case 0xDE:{
		opbytes = 2; cycles=8;
		currentOpCode= "SBC n : " + formatHex(mem.read(pc+1)); 
		sbc(reg.A, mem.read(pc+1));break;
	}
	case 0xDF:  rst(0x18); cycles=16; currentOpCode= "RST 0x18"; break;
	case 0xE0:{
		opbytes = 2; cycles=12;
		currentOpCode= "LDH (n) A : " + formatHex(mem.read(pc+1)); 
		 ldh_E0(mem.read(pc+1));
		break;
	}
	case 0xE1:  pop(reg.H, reg.L); cycles=12; currentOpCode= "POP HL"; break;
	case 0xE2:  load( joinByte(0x00, reg.C), reg.A ); cycles=8; currentOpCode= "LD (C) A"; break;
	case 0xE5:  push(reg.H, reg.L); cycles=16; currentOpCode= "PUSH HL"; break;
	case 0xE6:{
		opbytes = 2; cycles=8;
		currentOpCode= "AND n : " + formatHex(mem.read(pc+1)); 
		logAnd(reg.A, mem.read(pc+1));break;
	}
	case 0xE7:  rst(0x20); cycles=16; currentOpCode= "RST 0x20"; break;
	case 0xE8:{
		int8_t val1 = int8_t(mem.read(pc+1)); 
		opbytes = 2; cycles=16;
		currentOpCode= "ADD SP e : " + formatHex(mem.read(pc+1)); 
		 addByte2SP(val1);		break;
	}
	case 0xE9:  jp( pairReg(reg.H, reg.L) ); cycles=4; currentOpCode= "JP HL"; break;
	case 0xEA:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load( joinByte(val2, val1), reg.A); currentOpCode= "LD (nn) A : " + formatHex(val2) + formatHex(val1); 
		opbytes = 3; cycles=8; 
		break;
	}
	case 0xEE:{
		opbytes = 2; cycles=8;
		currentOpCode= "XOR n : " + formatHex(mem.read(pc+1)); 
		logXor(reg.A, mem.read(pc+1));break;
	}
	case 0xEF:  rst(0x28); cycles=16; currentOpCode= "RST 0x28"; break;
	case 0xF0:{
		opbytes = 2; cycles=12;
		currentOpCode= "LDH A (n) : " + formatHex(mem.read(pc+1)); 
		 ldh_F0(mem.read(pc+1));
		break;
	}
	case 0xF1:  pop(reg.A, reg.F); cycles=12; currentOpCode= "POP AF"; break;
	case 0xF2:  load( reg.A, mem.read(joinByte(0x00, reg.C)) ); cycles=8; currentOpCode= "LD A (C)"; break;
	case 0xF3:  di(); cycles=4; currentOpCode= "DI"; break;
	case 0xF5:  push(reg.A, reg.F); cycles=16; currentOpCode= "PUSH AF"; break;
	case 0xF6:{
		opbytes = 2; cycles=8;
		currentOpCode= "OR n : " + formatHex(mem.read(pc+1)); 
		logOr(reg.A, mem.read(pc+1));break;
	}
	case 0xF7:  rst(0x30); cycles=16; currentOpCode= "RST 0x30"; break;
	case 0xF8:{
		opbytes = 2; cycles=12;
		currentOpCode= "LD HL SP+e : " + formatHex(mem.read(pc+1)); 
		loadSP2Reg( reg.H, reg.L); addByte2SP(int8_t(mem.read(pc+1))); 
		break;
	}
	case 0xF9:  loadSP( reg.H, reg.L); cycles=8; currentOpCode= "LD SP HL"; break;
	case 0xFA:{
		uint8_t val1 = mem.read(pc+1); uint8_t val2 = mem.read(pc+2);
		load(reg.A, joinByte(val2,val1) ); currentOpCode= "LD A (nn) : " + formatHex(val2) + formatHex(val1);
		opbytes = 3; cycles=8; 
		break;
	}
	case 0xFB:  ei(); cycles=4; currentOpCode= "EI"; break;
	case 0xFE:{
		opbytes = 2; cycles=8;
		currentOpCode= "CP n : " + formatHex(mem.read(pc+1)); 
		cp(reg.A, mem.read(pc+1));break;
	}
	case 0xFF:  rst(0x38); cycles=16; currentOpCode= "RST 0x38"; break;
	default: debugOpCode << "***Instruction not recognized*** " << HEXPRINT(code) << "\n"; break; 
}
