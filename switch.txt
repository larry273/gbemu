switch (*code) {
	case 0x00: std::cout << HEXCOUNT(pc) << " NOP\n"; break;
	case 0x01: std::cout << HEXCOUNT(pc) << " LD BC nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0x02: std::cout << HEXCOUNT(pc) << " LD (BC) A\n"; break;
	case 0x03: std::cout << HEXCOUNT(pc) << " INC BC\n"; break;
	case 0x04: std::cout << HEXCOUNT(pc) << " INC B\n"; break;
	case 0x05: std::cout << HEXCOUNT(pc) << " DEC B\n"; break;
	case 0x06: std::cout << HEXCOUNT(pc) << " LD B n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x07: std::cout << HEXCOUNT(pc) << " RLCA\n"; break;
	case 0x08: std::cout << HEXCOUNT(pc) << " LD (nn) SP " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0x09: std::cout << HEXCOUNT(pc) << " ADD HL BC\n"; break;
	case 0x0A: std::cout << HEXCOUNT(pc) << " LD A (BC)\n"; break;
	case 0x0B: std::cout << HEXCOUNT(pc) << " DEC BC\n"; break;
	case 0x0C: std::cout << HEXCOUNT(pc) << " INC C\n"; break;
	case 0x0D: std::cout << HEXCOUNT(pc) << " DEC C\n"; break;
	case 0x0E: std::cout << HEXCOUNT(pc) << " LD C n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x0F: std::cout << HEXCOUNT(pc) << " RRCA\n"; break;
	case 0x10: std::cout << HEXCOUNT(pc) << " STOP\n"; break;
	case 0x11: std::cout << HEXCOUNT(pc) << " LD DE nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0x12: std::cout << HEXCOUNT(pc) << " LD (DE) A\n"; break;
	case 0x13: std::cout << HEXCOUNT(pc) << " INC DE\n"; break;
	case 0x14: std::cout << HEXCOUNT(pc) << " INC D\n"; break;
	case 0x15: std::cout << HEXCOUNT(pc) << " DEC D\n"; break;
	case 0x16: std::cout << HEXCOUNT(pc) << " LD D n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x17: std::cout << HEXCOUNT(pc) << " RLA\n"; break;
	case 0x18: std::cout << HEXCOUNT(pc) << " JR e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x19: std::cout << HEXCOUNT(pc) << " ADD HL DE\n"; break;
	case 0x1A: std::cout << HEXCOUNT(pc) << " LD A (DE)\n"; break;
	case 0x1B: std::cout << HEXCOUNT(pc) << " DEC DE\n"; break;
	case 0x1C: std::cout << HEXCOUNT(pc) << " INC E\n"; break;
	case 0x1D: std::cout << HEXCOUNT(pc) << " DEC E\n"; break;
	case 0x1E: std::cout << HEXCOUNT(pc) << " LD E n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x1F: std::cout << HEXCOUNT(pc) << " RRA\n"; break;
	case 0x20: std::cout << HEXCOUNT(pc) << " JR NZ e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x21: std::cout << HEXCOUNT(pc) << " LD HL nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0x22: std::cout << HEXCOUNT(pc) << " LD (HL+) A\n"; break;
	case 0x23: std::cout << HEXCOUNT(pc) << " INC HL\n"; break;
	case 0x24: std::cout << HEXCOUNT(pc) << " INC H\n"; break;
	case 0x25: std::cout << HEXCOUNT(pc) << " DEC H\n"; break;
	case 0x26: std::cout << HEXCOUNT(pc) << " LD H n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x27: std::cout << HEXCOUNT(pc) << " DAA\n"; break;
	case 0x28: std::cout << HEXCOUNT(pc) << " JR Z e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x29: std::cout << HEXCOUNT(pc) << " ADD HL HL\n"; break;
	case 0x2A: std::cout << HEXCOUNT(pc) << " LD A (HL+)\n"; break;
	case 0x2B: std::cout << HEXCOUNT(pc) << " DEC HL\n"; break;
	case 0x2C: std::cout << HEXCOUNT(pc) << " INC L\n"; break;
	case 0x2D: std::cout << HEXCOUNT(pc) << " DEC L\n"; break;
	case 0x2E: std::cout << HEXCOUNT(pc) << " LD L n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x2F: std::cout << HEXCOUNT(pc) << " CPL\n"; break;
	case 0x30: std::cout << HEXCOUNT(pc) << " JR NC e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x31: std::cout << HEXCOUNT(pc) << " LD SP nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0x32: std::cout << HEXCOUNT(pc) << " LD (HL-) A\n"; break;
	case 0x33: std::cout << HEXCOUNT(pc) << " INC SP\n"; break;
	case 0x34: std::cout << HEXCOUNT(pc) << " INC (HL)\n"; break;
	case 0x35: std::cout << HEXCOUNT(pc) << " DEC (HL)\n"; break;
	case 0x36: std::cout << HEXCOUNT(pc) << " LD (HL) n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x37: std::cout << HEXCOUNT(pc) << " SCF\n"; break;
	case 0x38: std::cout << HEXCOUNT(pc) << " JR C e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x39: std::cout << HEXCOUNT(pc) << " ADD HL SP\n"; break;
	case 0x3A: std::cout << HEXCOUNT(pc) << " LD A (HL-)\n"; break;
	case 0x3B: std::cout << HEXCOUNT(pc) << " DEC SP\n"; break;
	case 0x3C: std::cout << HEXCOUNT(pc) << " INC A\n"; break;
	case 0x3D: std::cout << HEXCOUNT(pc) << " DEC A\n"; break;
	case 0x3E: std::cout << HEXCOUNT(pc) << " LD A n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0x3F: std::cout << HEXCOUNT(pc) << " CCF\n"; break;
	case 0x40: std::cout << HEXCOUNT(pc) << " LD B B\n"; break;
	case 0x41: std::cout << HEXCOUNT(pc) << " LD B C\n"; break;
	case 0x42: std::cout << HEXCOUNT(pc) << " LD B D\n"; break;
	case 0x43: std::cout << HEXCOUNT(pc) << " LD B E\n"; break;
	case 0x44: std::cout << HEXCOUNT(pc) << " LD B H\n"; break;
	case 0x45: std::cout << HEXCOUNT(pc) << " LD B L\n"; break;
	case 0x46: std::cout << HEXCOUNT(pc) << " LD B (HL)\n"; break;
	case 0x47: std::cout << HEXCOUNT(pc) << " LD B A\n"; break;
	case 0x48: std::cout << HEXCOUNT(pc) << " LD C B\n"; break;
	case 0x49: std::cout << HEXCOUNT(pc) << " LD C C\n"; break;
	case 0x4A: std::cout << HEXCOUNT(pc) << " LD C D\n"; break;
	case 0x4B: std::cout << HEXCOUNT(pc) << " LD C E\n"; break;
	case 0x4C: std::cout << HEXCOUNT(pc) << " LD C H\n"; break;
	case 0x4D: std::cout << HEXCOUNT(pc) << " LD C L\n"; break;
	case 0x4E: std::cout << HEXCOUNT(pc) << " LD C (HL)\n"; break;
	case 0x4F: std::cout << HEXCOUNT(pc) << " LD C A\n"; break;
	case 0x50: std::cout << HEXCOUNT(pc) << " LD D B\n"; break;
	case 0x51: std::cout << HEXCOUNT(pc) << " LD D C\n"; break;
	case 0x52: std::cout << HEXCOUNT(pc) << " LD D D\n"; break;
	case 0x53: std::cout << HEXCOUNT(pc) << " LD D E\n"; break;
	case 0x54: std::cout << HEXCOUNT(pc) << " LD D H\n"; break;
	case 0x55: std::cout << HEXCOUNT(pc) << " LD D L\n"; break;
	case 0x56: std::cout << HEXCOUNT(pc) << " LD D (HL)\n"; break;
	case 0x57: std::cout << HEXCOUNT(pc) << " LD D A\n"; break;
	case 0x58: std::cout << HEXCOUNT(pc) << " LD E B\n"; break;
	case 0x59: std::cout << HEXCOUNT(pc) << " LD E C\n"; break;
	case 0x5A: std::cout << HEXCOUNT(pc) << " LD E D\n"; break;
	case 0x5B: std::cout << HEXCOUNT(pc) << " LD E E\n"; break;
	case 0x5C: std::cout << HEXCOUNT(pc) << " LD E H\n"; break;
	case 0x5D: std::cout << HEXCOUNT(pc) << " LD E L\n"; break;
	case 0x5E: std::cout << HEXCOUNT(pc) << " LD E (HL)\n"; break;
	case 0x5F: std::cout << HEXCOUNT(pc) << " LD E A\n"; break;
	case 0x60: std::cout << HEXCOUNT(pc) << " LD H B\n"; break;
	case 0x61: std::cout << HEXCOUNT(pc) << " LD H C\n"; break;
	case 0x62: std::cout << HEXCOUNT(pc) << " LD H D\n"; break;
	case 0x63: std::cout << HEXCOUNT(pc) << " LD H E\n"; break;
	case 0x64: std::cout << HEXCOUNT(pc) << " LD H H\n"; break;
	case 0x65: std::cout << HEXCOUNT(pc) << " LD H L\n"; break;
	case 0x66: std::cout << HEXCOUNT(pc) << " LD H (HL)\n"; break;
	case 0x67: std::cout << HEXCOUNT(pc) << " LD H A\n"; break;
	case 0x68: std::cout << HEXCOUNT(pc) << " LD L B\n"; break;
	case 0x69: std::cout << HEXCOUNT(pc) << " LD L C\n"; break;
	case 0x6A: std::cout << HEXCOUNT(pc) << " LD L D\n"; break;
	case 0x6B: std::cout << HEXCOUNT(pc) << " LD L E\n"; break;
	case 0x6C: std::cout << HEXCOUNT(pc) << " LD L H\n"; break;
	case 0x6D: std::cout << HEXCOUNT(pc) << " LD L L\n"; break;
	case 0x6E: std::cout << HEXCOUNT(pc) << " LD L (HL)\n"; break;
	case 0x6F: std::cout << HEXCOUNT(pc) << " LD L A\n"; break;
	case 0x70: std::cout << HEXCOUNT(pc) << " LD (HL) B\n"; break;
	case 0x71: std::cout << HEXCOUNT(pc) << " LD (HL) C\n"; break;
	case 0x72: std::cout << HEXCOUNT(pc) << " LD (HL) D\n"; break;
	case 0x73: std::cout << HEXCOUNT(pc) << " LD (HL) E\n"; break;
	case 0x74: std::cout << HEXCOUNT(pc) << " LD (HL) H\n"; break;
	case 0x75: std::cout << HEXCOUNT(pc) << " LD (HL) L\n"; break;
	case 0x76: std::cout << HEXCOUNT(pc) << " HALT\n"; break;
	case 0x77: std::cout << HEXCOUNT(pc) << " LD (HL) A\n"; break;
	case 0x78: std::cout << HEXCOUNT(pc) << " LD A B\n"; break;
	case 0x79: std::cout << HEXCOUNT(pc) << " LD A C\n"; break;
	case 0x7A: std::cout << HEXCOUNT(pc) << " LD A D\n"; break;
	case 0x7B: std::cout << HEXCOUNT(pc) << " LD A E\n"; break;
	case 0x7C: std::cout << HEXCOUNT(pc) << " LD A H\n"; break;
	case 0x7D: std::cout << HEXCOUNT(pc) << " LD A L\n"; break;
	case 0x7E: std::cout << HEXCOUNT(pc) << " LD A (HL)\n"; break;
	case 0x7F: std::cout << HEXCOUNT(pc) << " LD A A\n"; break;
	case 0x80: std::cout << HEXCOUNT(pc) << " ADD B\n"; break;
	case 0x81: std::cout << HEXCOUNT(pc) << " ADD C\n"; break;
	case 0x82: std::cout << HEXCOUNT(pc) << " ADD D\n"; break;
	case 0x83: std::cout << HEXCOUNT(pc) << " ADD E\n"; break;
	case 0x84: std::cout << HEXCOUNT(pc) << " ADD H\n"; break;
	case 0x85: std::cout << HEXCOUNT(pc) << " ADD L\n"; break;
	case 0x86: std::cout << HEXCOUNT(pc) << " ADD (HL)\n"; break;
	case 0x87: std::cout << HEXCOUNT(pc) << " ADD A\n"; break;
	case 0x88: std::cout << HEXCOUNT(pc) << " ADC B\n"; break;
	case 0x89: std::cout << HEXCOUNT(pc) << " ADC C\n"; break;
	case 0x8A: std::cout << HEXCOUNT(pc) << " ADC D\n"; break;
	case 0x8B: std::cout << HEXCOUNT(pc) << " ADC E\n"; break;
	case 0x8C: std::cout << HEXCOUNT(pc) << " ADC H\n"; break;
	case 0x8D: std::cout << HEXCOUNT(pc) << " ADC L\n"; break;
	case 0x8E: std::cout << HEXCOUNT(pc) << " ADC (HL)\n"; break;
	case 0x8F: std::cout << HEXCOUNT(pc) << " ADC A\n"; break;
	case 0x90: std::cout << HEXCOUNT(pc) << " SUB B\n"; break;
	case 0x91: std::cout << HEXCOUNT(pc) << " SUB C\n"; break;
	case 0x92: std::cout << HEXCOUNT(pc) << " SUB D\n"; break;
	case 0x93: std::cout << HEXCOUNT(pc) << " SUB E\n"; break;
	case 0x94: std::cout << HEXCOUNT(pc) << " SUB H\n"; break;
	case 0x95: std::cout << HEXCOUNT(pc) << " SUB L\n"; break;
	case 0x96: std::cout << HEXCOUNT(pc) << " SUB (HL)\n"; break;
	case 0x97: std::cout << HEXCOUNT(pc) << " SUB A\n"; break;
	case 0x98: std::cout << HEXCOUNT(pc) << " SBC B\n"; break;
	case 0x99: std::cout << HEXCOUNT(pc) << " SBC C\n"; break;
	case 0x9A: std::cout << HEXCOUNT(pc) << " SBC D\n"; break;
	case 0x9B: std::cout << HEXCOUNT(pc) << " SBC E\n"; break;
	case 0x9C: std::cout << HEXCOUNT(pc) << " SBC H\n"; break;
	case 0x9D: std::cout << HEXCOUNT(pc) << " SBC L\n"; break;
	case 0x9E: std::cout << HEXCOUNT(pc) << " SBC (HL)\n"; break;
	case 0x9F: std::cout << HEXCOUNT(pc) << " SBC A\n"; break;
	case 0xA0: std::cout << HEXCOUNT(pc) << " AND B\n"; break;
	case 0xA1: std::cout << HEXCOUNT(pc) << " AND C\n"; break;
	case 0xA2: std::cout << HEXCOUNT(pc) << " AND D\n"; break;
	case 0xA3: std::cout << HEXCOUNT(pc) << " AND E\n"; break;
	case 0xA4: std::cout << HEXCOUNT(pc) << " AND H\n"; break;
	case 0xA5: std::cout << HEXCOUNT(pc) << " AND L\n"; break;
	case 0xA6: std::cout << HEXCOUNT(pc) << " AND (HL)\n"; break;
	case 0xA7: std::cout << HEXCOUNT(pc) << " AND A\n"; break;
	case 0xA8: std::cout << HEXCOUNT(pc) << " XOR B\n"; break;
	case 0xA9: std::cout << HEXCOUNT(pc) << " XOR C\n"; break;
	case 0xAA: std::cout << HEXCOUNT(pc) << " XOR D\n"; break;
	case 0xAB: std::cout << HEXCOUNT(pc) << " XOR E\n"; break;
	case 0xAC: std::cout << HEXCOUNT(pc) << " XOR H\n"; break;
	case 0xAD: std::cout << HEXCOUNT(pc) << " XOR L\n"; break;
	case 0xAE: std::cout << HEXCOUNT(pc) << " XOR (HL)\n"; break;
	case 0xAF: std::cout << HEXCOUNT(pc) << " XOR A\n"; break;
	case 0xB0: std::cout << HEXCOUNT(pc) << " OR B\n"; break;
	case 0xB1: std::cout << HEXCOUNT(pc) << " OR C\n"; break;
	case 0xB2: std::cout << HEXCOUNT(pc) << " OR D\n"; break;
	case 0xB3: std::cout << HEXCOUNT(pc) << " OR E\n"; break;
	case 0xB4: std::cout << HEXCOUNT(pc) << " OR H\n"; break;
	case 0xB5: std::cout << HEXCOUNT(pc) << " OR L\n"; break;
	case 0xB6: std::cout << HEXCOUNT(pc) << " OR (HL)\n"; break;
	case 0xB7: std::cout << HEXCOUNT(pc) << " OR A\n"; break;
	case 0xB8: std::cout << HEXCOUNT(pc) << " CP B\n"; break;
	case 0xB9: std::cout << HEXCOUNT(pc) << " CP C\n"; break;
	case 0xBA: std::cout << HEXCOUNT(pc) << " CP D\n"; break;
	case 0xBB: std::cout << HEXCOUNT(pc) << " CP E\n"; break;
	case 0xBC: std::cout << HEXCOUNT(pc) << " CP H\n"; break;
	case 0xBD: std::cout << HEXCOUNT(pc) << " CP L\n"; break;
	case 0xBE: std::cout << HEXCOUNT(pc) << " CP (HL)\n"; break;
	case 0xBF: std::cout << HEXCOUNT(pc) << " CP A\n"; break;
	case 0xC0: std::cout << HEXCOUNT(pc) << " RET NZ\n"; break;
	case 0xC1: std::cout << HEXCOUNT(pc) << " POP BC\n"; break;
	case 0xC2: std::cout << HEXCOUNT(pc) << " JP NZ nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xC3: std::cout << HEXCOUNT(pc) << " JP nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xC4: std::cout << HEXCOUNT(pc) << " CALL NZ nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xC5: std::cout << HEXCOUNT(pc) << " PUSH BC\n"; break;
	case 0xC6: std::cout << HEXCOUNT(pc) << " ADD n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xC7: std::cout << HEXCOUNT(pc) << " RST 0x00\n"; break;
	case 0xC8: std::cout << HEXCOUNT(pc) << " RET Z\n"; break;
	case 0xC9: std::cout << HEXCOUNT(pc) << " RET\n"; break;
	case 0xCA: std::cout << HEXCOUNT(pc) << " JP Z nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xCB: std::cout << HEXCOUNT(pc) << " CB op\n"; break;
	case 0xCC: std::cout << HEXCOUNT(pc) << " CALL Z nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xCD: std::cout << HEXCOUNT(pc) << " CALL nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xCE: std::cout << HEXCOUNT(pc) << " ADC n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xCF: std::cout << HEXCOUNT(pc) << " RST 0x08\n"; break;
	case 0xD0: std::cout << HEXCOUNT(pc) << " RET NC\n"; break;
	case 0xD1: std::cout << HEXCOUNT(pc) << " POP DE\n"; break;
	case 0xD2: std::cout << HEXCOUNT(pc) << " JP NC nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xD4: std::cout << HEXCOUNT(pc) << " CALL NC nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xD5: std::cout << HEXCOUNT(pc) << " PUSH DE\n"; break;
	case 0xD6: std::cout << HEXCOUNT(pc) << " SUB n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xD7: std::cout << HEXCOUNT(pc) << " RST 0x10\n"; break;
	case 0xD8: std::cout << HEXCOUNT(pc) << " RET C\n"; break;
	case 0xD9: std::cout << HEXCOUNT(pc) << " RETI\n"; break;
	case 0xDA: std::cout << HEXCOUNT(pc) << " JP C nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xDC: std::cout << HEXCOUNT(pc) << " CALL C nn " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xDE: std::cout << HEXCOUNT(pc) << " SBC n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xDF: std::cout << HEXCOUNT(pc) << " RST 0x18\n"; break;
	case 0xE0: std::cout << HEXCOUNT(pc) << " LDH (n) A " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xE1: std::cout << HEXCOUNT(pc) << " POP HL\n"; break;
	case 0xE2: std::cout << HEXCOUNT(pc) << " LD (C) A\n"; break;
	case 0xE5: std::cout << HEXCOUNT(pc) << " PUSH HL\n"; break;
	case 0xE6: std::cout << HEXCOUNT(pc) << " AND n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xE7: std::cout << HEXCOUNT(pc) << " RST 0x20\n"; break;
	case 0xE8: std::cout << HEXCOUNT(pc) << " ADD SP e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xE9: std::cout << HEXCOUNT(pc) << " JP HL\n"; break;
	case 0xEA: std::cout << HEXCOUNT(pc) << " LD (nn) A " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xEE: std::cout << HEXCOUNT(pc) << " XOR n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xEF: std::cout << HEXCOUNT(pc) << " RST 0x28\n"; break;
	case 0xF0: std::cout << HEXCOUNT(pc) << " LDH A (n) " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xF1: std::cout << HEXCOUNT(pc) << " POP AF\n"; break;
	case 0xF2: std::cout << HEXCOUNT(pc) << " LD A (C)\n"; break;
	case 0xF3: std::cout << HEXCOUNT(pc) << " DI\n"; break;
	case 0xF5: std::cout << HEXCOUNT(pc) << " PUSH AF\n"; break;
	case 0xF6: std::cout << HEXCOUNT(pc) << " OR n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xF7: std::cout << HEXCOUNT(pc) << " RST 0x30\n"; break;
	case 0xF8: std::cout << HEXCOUNT(pc) << " LD HL SP+e " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xF9: std::cout << HEXCOUNT(pc) << " LD SP HL\n"; break;
	case 0xFA: std::cout << HEXCOUNT(pc) << " LD A (nn) " << HEX(gbdata.buffer[pc+1]) << ' ' << HEX(gbdata.buffer[pc+2]) << "\n"; opbytes = 3; break;
	case 0xFB: std::cout << HEXCOUNT(pc) << " EI\n"; break;
	case 0xFE: std::cout << HEXCOUNT(pc) << " CP n " << HEX(gbdata.buffer[pc+1]) << "\n"; opbytes = 2; break;
	case 0xFF: std::cout << HEXCOUNT(pc) << " RST 0x38\n"; break;
	default: std::cout << "***Instruction not recognized*** " << HEX(*code) << "\n"; break; 
}
